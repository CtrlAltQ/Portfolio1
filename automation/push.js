import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

export default function pushToGit(newPosts) {
  if (!newPosts || newPosts.length === 0) {
    console.log('‚è≠Ô∏è  No new posts to push');
    return;
  }

  try {
    console.log('üì§ Pushing new blog posts to Git...');
    
    // Add blog files to git
    execSync('git add blog/', { stdio: 'inherit', cwd: process.cwd() });
    
    // Create commit message
    const postTitles = newPosts.map(post => post.title).join(', ');
    const commitMessage = `ü§ñ Auto-generated blog post${newPosts.length > 1 ? 's' : ''}: ${postTitles}

Generated by AltQ automation system
${newPosts.length} new post${newPosts.length > 1 ? 's' : ''} added to portfolio blog

üîß Files updated:
${newPosts.map(post => `- blog/posts/${post.slug}.html`).join('\n')}
${newPosts.map(post => `- blog/posts/${post.slug}.json`).join('\n')}
- blog/posts/manifest.json

üöÄ Generated with Claude Code
Co-Authored-By: Claude <noreply@anthropic.com>`;

    // Commit changes
    execSync(`git commit -m "${commitMessage}"`, { 
      stdio: 'inherit', 
      cwd: process.cwd() 
    });
    
    // Check if we should push to remote
    try {
      execSync('git remote', { stdio: 'pipe', cwd: process.cwd() });
      execSync('git push', { stdio: 'inherit', cwd: process.cwd() });
      console.log('‚úÖ Successfully pushed to remote repository');
    } catch (remoteError) {
      console.log('‚ö†Ô∏è  No remote repository configured, skipping push');
    }
    
    console.log(`üéâ Successfully committed ${newPosts.length} new blog post${newPosts.length > 1 ? 's' : ''}`);
    
  } catch (error) {
    console.error('‚ùå Failed to push to Git:', error.message);
    throw error;
  }
}

// Function to check git status
export function checkGitStatus() {
  try {
    const status = execSync('git status --porcelain', { 
      encoding: 'utf8', 
      cwd: process.cwd() 
    });
    
    if (status.trim()) {
      console.log('üìã Git status:');
      console.log(status);
      return true; // Has changes
    } else {
      console.log('‚ú® Working directory clean');
      return false; // No changes
    }
  } catch (error) {
    console.error('‚ùå Failed to check git status:', error.message);
    return false;
  }
}

// Function to create a new branch for blog posts
export function createBlogBranch(branchName = `blog-auto-${Date.now()}`) {
  try {
    console.log(`üåø Creating new branch: ${branchName}`);
    execSync(`git checkout -b ${branchName}`, { 
      stdio: 'inherit', 
      cwd: process.cwd() 
    });
    return branchName;
  } catch (error) {
    console.error('‚ùå Failed to create branch:', error.message);
    throw error;
  }
}